Planning:
create database
setup express: app, routes, services, doas  https://zellwk.com/blog/async-await-express/
-change All express files to Async
Testing restfulAPI

implement Authorization and authentication 
implement aws picture server


App UI/UX:
-------------
Empolyee:
-login: [Page]::UserTable, roleTable
    id -generated
username
password
first
last
email
   role-id -ForgeinKey

   role-id -generated::RoleTable
user-role
###UserTable -Join- RoleTable###

=============================================

-add reimburse request: [Page]
-upload-img
    id -generated
amount
sumittedTime
descript
reciept -img
author -user
resolver -user
    status-id
    type-id

   type-id
type -Type: lodging, travel, food, other


###reimburse -Jion- type###

==================================================

-view update status: [Page]
-view past tickets
    status-id
status -status view
Pendin, accept, denied

###status###

=======================================================

Manager
----------
-login: [Page]::UserTable
    id -generated
username
password
first
last
email
   role-id -ForgeinKey

   role-id -generated::RoleTable
user-role
###UserTable -Join- RoleTable###

====================================================
-View all reimb. for all employees

##

-filter request by status

##reimburse -Jion- status##

============================================
-aprove/deny request
    id -generated
amount
sumittedTime
descript
reciept -upload-img
author -user
resolver -user
    status-id
    type-id

   type-id
type -Type: lodging, travel, food, other

    status-id
status -status view

###reimburse -Jion- type -Jion- status###

===============================
users:CRUD
roles:CRUD
reimburs:CRUD
type:CR
status:CRU






















Commands:
npm install -g react app //globlal Install
install yarn //maybe if getting errors or package.json missing dependencies
//RX something with yarn to create react app
create-react-app NameHere --template="typescript"  //create app w/typescript
npm start //launch app

Setup:
--------
npm init
package.json		/*add manually*/
npm install express body-parser
npm install --save-dev pg typescript nodemon ts-node tslint @types/pg @types/express @types/node 
.gitignore		/*add manually*/ git init
tsconfig.json		/*add manually*/ tsc --init

npx tslint --init   /*installs tslint.json*/
npm install		/*to install node_modules for package.json edits*/

npm install --save-dev ts-jest jest @types/jest
npm install --save-dev supertest @types/supertest
jest.config.ts		/*add manually*/
jest.config.js		/*add manually*/

npm install cors jsonwebtoken bcryptjs
npm install --save-dev @types/bcryptjs @types/body-parser @types/cors @types/jsonwebtoken


-Package.json file:
"scripts": {
    "start": "nodemon ./src/app.ts",
    "test": "jest --verbose --watch --coverage --watchAll"

-.gitignore:
.vscode/
node_modules/

-tsconfig.js:
{
    "compilerOptions": {
        "module": "commonjs",
        "esModuleInterop": true,
        "target": "es6",
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "noImplicitAny": false,
        "moduleResolution": "node",
        "sourceMap": true,
        "outDir": "dist",
        "baseUrl": "./",
        "rootDirs": [".", "src"],
        "paths": {
            "*": [
                "node_modules/*",
                "src/types/*"            ]
        },
    },
    
    "include": [
        "src/**/*",
        "src/util/*.d.ts"
    ]
}


jest.config.ts:
module.exports = {
    'transform': {
        '^.+\\.tsx?$': 'ts-jest'
    },
    'testRegex': '(/test/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$',
    'moduleFileExtensions': [
        'ts',
        'tsx',
        'js',
        'jsx',
        'json',
        'node'
    ],
    'globals': {
        'ts-jest': {
            'userBabelrc': true
        }
    }


jest.config.js:
module.exports = {
    /* Delegate to ts-jest - most configuration will be in jest.config.ts */
    preset: 'ts-jest',
    testEnvironment: 'node',
};